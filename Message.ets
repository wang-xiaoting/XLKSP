import router from '@ohos.router';
import { dataManager, Message, ChatMessage } from '../utils/MangerData';

interface Notification {
  id: number,
  avatar: Resource,
  name: string,
  time: string,
  type: string,
  content?: string
}

interface NavItem {
  icon: string,
  label: string,
  route: string,
  active?: boolean
}

type TabType = 'private' | 'notification' | 'mention' | 'comment';

@Entry
@Component
struct Messages {
  @State currentTab: TabType = 'private'
  @State messages: Message[] = []
  @State notifications: Notification[] = []
  @State searchText: string = ''
  @State filteredMessages: Message[] = []
  @State showSendDialog: boolean = false
  @State sendMessageText: string = ''
  @State chatTarget: Message | null = null
  @State sendTargetName: string = ''

  private readonly tabNames: Record<TabType, string> = {
    'private': 'ÁßÅ‰ø°',
    'notification': 'ÈÄöÁü•',
    'mention': '@Êàë',
    'comment': 'ËØÑËÆ∫'
  }

  private readonly notificationTypes: Record<string, string> = {
    'comment': 'ËØÑËÆ∫‰∫Ü‰Ω†ÁöÑËßÜÈ¢ë',
    'like': 'ÁÇπËµû‰∫Ü‰Ω†ÁöÑËßÜÈ¢ë'
  }

  private readonly navItems: NavItem[] = [
    { icon: 'üè†', label: 'È¶ñÈ°µ', route: 'Index', active: false },
    { icon: 'üîç', label: 'ÂèëÁé∞', route: 'Discover', active: false },
    { icon: '+', label: 'ÂàõÂª∫', route: 'Create', active: false },
    { icon: 'üí¨', label: 'Ê∂àÊÅØ', route: 'Messages', active: true },
    { icon: 'üë§', label: 'Êàë', route: 'Profile', active: false }
  ]

  async aboutToAppear() {
    await dataManager.init(); // ÂøÖÈ°ªÂàùÂßãÂåñ
    // Âä†ËΩΩÊú¨Âú∞Ê∂àÊÅØÂàóË°®
    const msgs = await dataManager.getPrivateMessages()
    if (Array.isArray(msgs) && msgs.length > 0) {
      this.messages = msgs
    } else {
      this.messages = [
        {
          id: 1,
          avatar: $r('app.media.wudaodaren'),
          name: 'ËàûËπàËææ‰∫∫',
          time: '12:30',
          content: '‰Ω†Â•ΩÔºåËØ∑ÈóÆ‰Ω†ÂØπÊúÄÊñ∞ÁöÑËàûËπàËßÜÈ¢ëÊúâ‰ªÄ‰πàÂª∫ËÆÆÂêóÔºüÊàëËßâÂæó‰Ω†ÁöÑÂä®‰ΩúÁºñÊéíÂæà‰∏ì‰∏öÔºÅ',
          unreadCount: 2
        },
        {
          id: 2,
          avatar: $r('app.media.profile2'),
          name: 'Èü≥‰πêÂà∂‰Ωú‰∫∫',
          time: 'Êò®Â§©',
          content: 'ÊàëÂàö‰∏ä‰º†‰∫ÜÊñ∞ÁöÑÈü≥‰πêÔºåÂ∏åÊúõ‰Ω†ËÉΩÂê¨Âê¨ÁúãÔºåÁªôÁÇπÂª∫ËÆÆÔºÅ'
        }
      ]
      await dataManager.savePrivateMessages(this.messages)
    }
    this.filteredMessages = this.messages

    // Âä†ËΩΩÁ≥ªÁªüÈÄöÁü•
    const notis = await dataManager.getNotifications()
    this.notifications = Array.isArray(notis) ? notis : []
  }

  private searchMessages(text: string) {
    this.searchText = text
    this.filteredMessages = text.trim() === ''
      ? this.messages
      : this.messages.filter(message =>
    message.name.toLowerCase().includes(text.toLowerCase()) ||
    message.content.toLowerCase().includes(text.toLowerCase())
    )
  }

  // ÂèëÈÄÅÊ∂àÊÅØÔºåÂπ∂‰øùÂ≠òÂà∞ËÅäÂ§©ÂéÜÂè≤ÂíåÊëòË¶Å
  private async sendMessageNew() {
    let targetName = this.chatTarget ? this.chatTarget.name : this.sendTargetName.trim()
    if (!this.sendMessageText.trim() || !targetName) {
      this.showSendDialog = false
      return
    }

    let userId = this.chatTarget ? this.chatTarget.id : Date.now(); // Êñ∞Áî®Êà∑Áî®Êó∂Èó¥Êà≥
    let avatar = this.chatTarget ? this.chatTarget.avatar : $r('app.media.wudaodaren');
    let nowTime = this.formatTime(new Date());
    let content = this.sendMessageText;

    // 1. Ëé∑ÂèñÂéÜÂè≤
    let history = await dataManager.getUserMessages(userId);
    if (!Array.isArray(history)) history = [];
    // 2. Êñ∞Â¢û‰∏ÄÊù°‚ÄúÊàëÂèëÁöÑ‚Äù
    history.push({
      id: Date.now(),
      content: content,
      isSelf: true,
      time: nowTime
    });
    await dataManager.saveUserMessages(userId, history);

    // 3. Êõ¥Êñ∞‰∏ªÊëòË¶ÅÔºà‰ºöËØùÂàóË°®Ôºâ
    let idx = this.messages.findIndex(msg => msg.id === userId);
    let msg: Message = {
      id: userId,
      avatar: avatar,
      name: targetName,
      time: nowTime,
      content: content,
      unreadCount: 0
    };
    if (idx > -1) {
      this.messages.splice(idx, 1);
    }
    this.messages = [msg, ...this.messages];
    await dataManager.savePrivateMessages(this.messages);
    this.filteredMessages = this.messages;

    this.sendMessageText = '';
    this.sendTargetName = '';
    this.showSendDialog = false;
  }

  // ÂÖ≥Èó≠ËÅäÂ§©Ê°ÜÊó∂‰πü‰øùÂ≠òÊï∞ÊçÆ
  private async closeSendDialog() {
    await dataManager.savePrivateMessages(this.messages)
    this.showSendDialog = false
    this.sendMessageText = ''
    this.sendTargetName = ''
    this.chatTarget = null
  }

  private formatTime(date: Date): string {
    let h = date.getHours().toString().padStart(2, '0');
    let m = date.getMinutes().toString().padStart(2, '0');
    return `${h}:${m}`;
  }

  @Builder Header() {
    Row() {
      Button() {
        Text('‚Üê').fontSize(24).fontColor('#FFFFFF')
      }
      .backgroundColor('transparent')
      .onClick(() => router.back())

      Text('Ê∂àÊÅØ')
        .fontSize(18)
        .fontWeight(FontWeight.Bold)
        .fontColor('#FFFFFF')

      Row() {
        Button() {
          Text('‚úçÔ∏è').fontSize(24).fontColor('#FFFFFF')
        }
        .backgroundColor('transparent')

        Button() {
          Text('‚ûï').fontSize(24).fontColor('#FFFFFF')
        }
        .backgroundColor('transparent')
        .onClick(() => {
          this.chatTarget = null
          this.sendMessageText = ''
          this.sendTargetName = ''
          this.showSendDialog = true
        })
      }
    }
    .width('100%')
    .padding(15)
    .justifyContent(FlexAlign.SpaceBetween)
  }

  @Builder MessageTabs() {
    Row() {
      ForEach(['private', 'notification', 'mention', 'comment'] as TabType[], (tab: TabType) => {
        Text(this.tabNames[tab])
          .fontSize(16)
          .fontColor(this.currentTab === tab ? '#FFFFFF' : 'rgba(255, 255, 255, 0.6)')
          .fontWeight(this.currentTab === tab ? FontWeight.Bold : FontWeight.Normal)
          .padding(10)
          .onClick(() => this.currentTab = tab)
      })
    }
    .width('100%')
    .justifyContent(FlexAlign.SpaceAround)
    .borderWidth({ bottom: 1 })
    .borderColor('rgba(255, 255, 255, 0.1)')
  }

  @Builder SearchBar() {
    Row() {
      Text('üîç').fontSize(16).opacity(0.7)
      TextInput({ placeholder: 'ÊêúÁ¥¢ËÅîÁ≥ª‰∫∫ÊàñÊ∂àÊÅØ' })
        .backgroundColor('transparent')
        .placeholderColor('rgba(255, 255, 255, 0.5)')
        .fontSize(14)
        .width('90%')
        .margin({ left: 10 })
        .onChange((value: string) => this.searchMessages(value))
    }
    .width('100%')
    .padding(10)
    .backgroundColor('rgba(255, 255, 255, 0.1)')
    .borderRadius(20)
    .margin(15)
  }

  @Builder MessageUnreadCount(message: Message) {
    if (message.unreadCount !== undefined && message.unreadCount > 0) {
      Text(message.unreadCount.toString())
        .width(18)
        .height(18)
        .fontSize(12)
        .textAlign(TextAlign.Center)
        .borderRadius(9)
        .backgroundColor('#FF0050')
        .fontColor('#FFFFFF')
    }
  }

  @Builder MessageList() {
    List() {
      ForEach(this.filteredMessages, (message: Message) => {
        ListItem() {
          Row() {
            Image(message.avatar)
              .width(50)
              .height(50)
              .borderRadius(25)
              .margin({ right: 15 })

            Column() {
              Row() {
                Text(message.name)
                  .fontSize(16)
                  .fontWeight(FontWeight.Bold)
                  .fontColor('#FFFFFF')
                Text(message.time)
                  .fontSize(12)
                  .fontColor('rgba(255, 255, 255, 0.6)')
              }
              .width('100%')
              .justifyContent(FlexAlign.SpaceBetween)

              Text(message.content)
                .fontSize(14)
                .fontColor('rgba(255, 255, 255, 0.8)')
                .maxLines(2)
                .textOverflow({ overflow: TextOverflow.Ellipsis })
            }
            .layoutWeight(1)

            this.MessageUnreadCount(message)

            Button() {
              Text('ÂèëÈÄÅ').fontSize(12).fontColor('#FF0050')
            }
            .backgroundColor('rgba(255,255,255,0.08)')
            .borderRadius(8)
            .onClick(() => {
              this.chatTarget = message
              this.sendMessageText = ''
              this.sendTargetName = ''
              this.showSendDialog = true
            })
          }
          .width('100%')
          .padding(15)
        }
        .onClick(() => {
          router.pushUrl({
            url: 'pages/Chat',
            params: {
              user: {
                id: message.id,
                name: message.name,
                avatar: message.avatar
              }
            }
          })
        })
      })
    }
    .width('100%')
    .layoutWeight(1)
  }

  @Builder NotificationContent(notification: Notification) {
    if (notification.content) {
      Text(notification.content as string)
        .fontSize(14)
        .backgroundColor('rgba(255, 255, 255, 0.1)')
        .padding(10)
        .borderRadius(8)
        .margin({ top: 5 })
        .onClick(() => {
          if (notification.type === 'comment' && notification.content) {
            dataManager.addComment(1, {
              id: Date.now(),
              userId: notification.id,
              userName: notification.name,
              content: notification.content,
              time: notification.time
            })
          }
        })
    }
  }

  @Builder NotificationList() {
    List() {
      ForEach(this.notifications, (notification: Notification) => {
        ListItem() {
          Row() {
            Image(notification.avatar)
              .width(50)
              .height(50)
              .borderRadius(25)
              .margin({ right: 15 })

            Column() {
              Row() {
                Text(notification.name)
                  .fontSize(16)
                  .fontWeight(FontWeight.Bold)
                  .fontColor('#FFFFFF')
                Text(notification.time)
                  .fontSize(12)
                  .fontColor('rgba(255, 255, 255, 0.6)')
              }
              .width('100%')
              .justifyContent(FlexAlign.SpaceBetween)

              Text(this.notificationTypes[notification.type] || '')
                .fontSize(14)
                .fontColor('rgba(255, 255, 255, 0.8)')

              this.NotificationContent(notification)
            }
            .layoutWeight(1)
          }
          .width('100%')
          .padding(15)
        }
      })
    }
    .width('100%')
    .layoutWeight(1)
  }

  @Builder SendDialog() {
    Stack() {
      Column() {
        Blank()
          .backgroundColor('rgba(0,0,0,0.4)')
          .width('100%')
          .height('100%')
      }
      Column() {
        // ÊòæÁ§∫‚ÄúÂèëÈÄÅÁªôxxx‚ÄùÊàñÊòµÁß∞ËæìÂÖ•Ê°Ü
        Text(`ÂèëÈÄÅÁªô ${this.chatTarget ? this.chatTarget.name : ''}`)
          .fontSize(16)
          .fontWeight(FontWeight.Bold)
          .margin({ bottom: 10 })
          .visibility(this.chatTarget ? Visibility.Visible : Visibility.None)

        TextInput({ placeholder: 'ËØ∑ËæìÂÖ•ËÅîÁ≥ª‰∫∫ÊòµÁß∞' })
          .width('100%')
          .padding(10)
          .backgroundColor('rgba(255,255,255,0.1)')
          .fontColor('#222')
          .placeholderColor('#aaa')
          .onChange((v: string) => { this.sendTargetName = v })
          .margin({ bottom: 10 })
          .visibility(this.chatTarget ? Visibility.None : Visibility.Visible)

        TextInput({ placeholder: 'ËØ∑ËæìÂÖ•Ê∂àÊÅØÂÜÖÂÆπ' })
          .width('100%')
          .padding(10)
          .backgroundColor('rgba(255,255,255,0.1)')
          .fontColor('#222')
          .placeholderColor('#aaa')
          .onChange((v: string) => { this.sendMessageText = v })
          .margin({ bottom: 12 })

        Row() {
          Button() {
            Text('ÂèñÊ∂à').fontColor('#888')
          }
          .backgroundColor('rgba(0,0,0,0.06)')
          .onClick(() => { this.closeSendDialog() })
          Button() {
            Text('ÂèëÈÄÅ').fontColor('#FF0050')
          }
          .backgroundColor('rgba(0,0,0,0.06)')
          .margin({ left: 20 })
          .onClick(() => { this.sendMessageNew() })
        }
        .width('100%')
        .justifyContent(FlexAlign.End)
      }
      .width('80%')
      .padding(20)
      .backgroundColor('#fff')
      .borderRadius(16)
      .alignItems(HorizontalAlign.Center)
      .position({ x: '10%', y: '30%' })
    }
  }

  @Builder BottomNav() {
    Row() {
      ForEach(this.navItems, (item: NavItem) => {
        Column() {
          Text(item.icon)
            .fontSize(24)
          Text(item.label)
            .fontSize(12)
            .fontColor(item.active ? '#FF0050' : '#FFFFFF')
        }
        .onClick(() => {
          if (!item.active) {
            router.pushUrl({ url: `pages/${item.route}` })
          }
        })
      })
    }
    .width('100%')
    .height(60)
    .padding({ left: 20, right: 20 })
    .justifyContent(FlexAlign.SpaceAround)
    .backgroundColor('rgba(0, 0, 0, 0.8)')
    .borderWidth({ top: 1 })
    .borderColor('rgba(255, 255, 255, 0.1)')
  }

  @Builder EmptyState() {
    Column() {
      Text(this.currentTab === 'mention' ? '@' : 'üí¨')
        .fontSize(60)
        .margin({ bottom: 20 })
      Text(this.currentTab === 'mention' ? 'ÊöÇÊó†@ÊèêÂèä' : 'ÊöÇÊó†ËØÑËÆ∫')
        .fontSize(18)
        .fontWeight(FontWeight.Bold)
      Text(this.currentTab === 'mention'
        ? 'ÂΩìÊúâ‰∫∫@‰Ω†Êó∂Ôºå‰ºöÊòæÁ§∫Âú®ËøôÈáå'
        : 'ÂΩìÊúâ‰∫∫ËØÑËÆ∫‰Ω†Êó∂Ôºå‰ºöÊòæÁ§∫Âú®ËøôÈáå')
        .fontSize(14)
        .opacity(0.7)
      Button() {
        Text('‚ûïÂèëËµ∑ËÅäÂ§©').fontSize(16).fontColor('#FF0050')
      }
      .margin({ top: 20 })
      .onClick(() => {
        this.chatTarget = null
        this.sendMessageText = ''
        this.sendTargetName = ''
        this.showSendDialog = true
      })
    }
    .width('100%')
    .height('60%')
    .justifyContent(FlexAlign.Center)
    .alignItems(HorizontalAlign.Center)
  }

  build() {
    Stack() {
      Column() {
        this.Header()
        this.MessageTabs()
        this.SearchBar()

        if (this.currentTab === 'private') {
          this.MessageList()
        } else if (this.currentTab === 'notification') {
          this.NotificationList()
        } else {
          this.EmptyState()
        }

        this.BottomNav()
      }
      .width('100%')
      .height('100%')
      .backgroundColor('#000000')

      if (this.showSendDialog) {
        this.SendDialog()
      }
    }
    .width('100%')
    .height('100%')
  }
}