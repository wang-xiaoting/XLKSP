import router from '@ohos.router';
import { RecommendedItem } from './discoverData';

interface RecommendDetailParams {
  item: RecommendedItem
}

// ÂêÑÂàÜÁ±ªÊ†áÁ≠æÂíåÁÆÄ‰ªãÁî®ÂèòÈáè‰∏éswitchÂÆûÁé∞
const CATEGORY_TAGS_DANCE = ['ÂÖ•Èó®', 'Âü∫Á°ÄÂä®‰Ωú', 'ËäÇÂ•èÊÑü', 'ÁÉ≠Èó®'];
const CATEGORY_TAGS_MUSIC = ['ÊîæÊùæ', 'È´òÊïà', 'ÂøÉÊÉÖ', 'Âàõ‰Ωú'];
const CATEGORY_TAGS_PHOTOGRAPHY = ['ÂÖâÂΩ±', 'ÊäÄÂ∑ß', 'ÂüéÂ∏Ç', 'ÊóÖÊãç'];
const CATEGORY_TAGS_FOOD = ['ÂÆ∂Â∏∏Ëèú', 'ÁÆÄÂçïÊòìÂ≠¶', 'Âø´ÊâãËèú'];
const CATEGORY_TAGS_ART = ['ÊèíÁîª', '‰∫åÊ¨°ÂÖÉ', '‰∏¥Êëπ'];
const CATEGORY_TAGS_GAME = ['MOBA', '‰∏äÂàÜ', 'Âõ¢Èòü'];
const CATEGORY_TAGS_FITNESS = ['Â±ÖÂÆ∂', 'ÂÅ•Ë∫´', 'È•ÆÈ£ü'];

const DEMO_DESCRIPTION_DANCE = 'Êú¨ÊïôÁ®ãÈÄÇÂêàÈõ∂Âü∫Á°ÄÂ≠¶ÂëòÔºå‰ªéÂü∫Êú¨ÂæãÂä®Âà∞ÁÆÄÂçïË°óËàûÂä®‰ΩúÂàÜËß£ÔºåÈÄêÊ≠•ÊèêÂçáËäÇÂ•èÊÑüÂíåË∫´‰ΩìÂçèË∞ÉÊÄß„ÄÇËØæÁ®ãÈÖçÊúâËØ¶ÁªÜÂàÜËß£ÂèäÂä®ÂõæÊºîÁ§∫ÔºåÈÄÇÂêàËá™Â≠¶‰∏éÂÖ¥Ë∂£ÂüπÂÖª„ÄÇ';
const DEMO_DESCRIPTION_MUSIC = 'Á≤æÂøÉÊåëÈÄâËΩªÈü≥‰πêÂêàÈõÜÔºåÂ∏ÆÂä©‰Ω†Âú®Â∑•‰ΩúÂíåÂ≠¶‰π†‰∏≠Âø´ÈÄüÊîæÊùæÔºåÊèêÂçá‰∏ìÊ≥®Âäõ„ÄÇÈÄÇÂêàËÉåÊôØÈü≥‰πêÊàñËÄÖÂÜ•ÊÉ≥‰ΩøÁî®„ÄÇ';
const DEMO_DESCRIPTION_PHOTOGRAPHY = 'Êïô‰Ω†Â¶Ç‰ΩïÂú®ÂüéÂ∏Ç‰∏≠ÊçïÊçâÊó•ËêΩÁæéÊôØÔºåÂà©Áî®ÂÖâÂΩ±ÂèòÂåñÊãçÂá∫È´òÁ∫ßÊÑüÁÖßÁâáÔºåÊèêÂçá‰Ω†ÁöÑÊëÑÂΩ±Ê∞¥Âπ≥„ÄÇ';
const DEMO_DESCRIPTION_FOOD = 'Á≤æÈÄâÂÆ∂Â∏∏Âø´ÊâãËèúÂÅöÊ≥ïÔºåÈ£üÊùêÁÆÄÂçïÔºåÊ≠•È™§ÊòìÊìç‰ΩúÔºåÂì™ÊÄïÈõ∂Âé®Ëâ∫‰πüËÉΩËΩªÊùæÂÅöÁæéÂë≥„ÄÇ';
const DEMO_DESCRIPTION_ART = 'Â∏¶‰Ω†‰ªéÈõ∂Â≠¶‰π†‰∫åÊ¨°ÂÖÉÊèíÁîª‰∏¥ÊëπÔºåÊéåÊè°‰∫∫Áâ©ÁªìÊûÑ„ÄÅËâ≤ÂΩ©Êê≠ÈÖçÁ≠âÊ†∏ÂøÉÊäÄÂ∑ß„ÄÇ';
const DEMO_DESCRIPTION_GAME = 'MOBA‰∏äÂàÜÁßòÁ±çÔºåËØ¶ÁªÜËÆ≤Ëß£Âõ¢ÈòüÂçè‰Ωú„ÄÅÁªÜËäÇÂ§ÑÁêÜ‰∏éËã±ÈõÑÈÄâÊã©ÔºåÂä©‰Ω†ËΩªÊùæË∂ÖÁ•û„ÄÇ';
const DEMO_DESCRIPTION_FITNESS = '‰∏çÁî®ÂéªÂÅ•Ë∫´ÊàøÔºåÂ±ÖÂÆ∂‰πüËÉΩÈ´òÊïàÈîªÁÇºÔºåÈÖçÂêàÁßëÂ≠¶È•ÆÈ£üÂª∫ËÆÆÔºåÂÅ•Â∫∑ÁîüÊ¥ªÊØè‰∏ÄÂ§©„ÄÇ';

@Entry
@Component
struct RecommendDetail {
  @State detail?: RecommendedItem = undefined

  aboutToAppear() {
    const params = router.getParams() as RecommendDetailParams
    if (params && params.item) {
      this.detail = params.item
    }
  }

  getTags(): string[] {
    if (!this.detail || !this.detail.category) return [];
    switch (this.detail.category) {
      case 'dance': return CATEGORY_TAGS_DANCE;
      case 'music': return CATEGORY_TAGS_MUSIC;
      case 'photography': return CATEGORY_TAGS_PHOTOGRAPHY;
      case 'food': return CATEGORY_TAGS_FOOD;
      case 'art': return CATEGORY_TAGS_ART;
      case 'game': return CATEGORY_TAGS_GAME;
      case 'fitness': return CATEGORY_TAGS_FITNESS;
      default: return [];
    }
  }

  getDescription(): string {
    if (!this.detail || !this.detail.category) return 'ÊöÇÊó†ËØ¶ÁªÜ‰ªãÁªç';
    switch (this.detail.category) {
      case 'dance': return DEMO_DESCRIPTION_DANCE;
      case 'music': return DEMO_DESCRIPTION_MUSIC;
      case 'photography': return DEMO_DESCRIPTION_PHOTOGRAPHY;
      case 'food': return DEMO_DESCRIPTION_FOOD;
      case 'art': return DEMO_DESCRIPTION_ART;
      case 'game': return DEMO_DESCRIPTION_GAME;
      case 'fitness': return DEMO_DESCRIPTION_FITNESS;
      default: return 'ÊöÇÊó†ËØ¶ÁªÜ‰ªãÁªç';
    }
  }

  @Builder Header() {
    Row() {
      Button() {
        Text('‚Üê').fontSize(24).fontColor('#FFFFFF')
      }
      .backgroundColor('transparent')
      .onClick(() => { router.back() })

      Text('Êé®ËçêËØ¶ÊÉÖ').fontSize(18).fontWeight(FontWeight.Bold).fontColor('#FFFFFF')
      Blank()
    }
    .width('100%').padding(20).justifyContent(FlexAlign.SpaceBetween).alignItems(VerticalAlign.Center)
  }

  build() {
    Column() {
      this.Header()

      if (this.detail) {
        // Â∞ÅÈù¢
        Image(this.detail.thumbnail)
          .width('100%')
          .height(200)
          .borderRadius(16)
          .objectFit(ImageFit.Cover)
          .margin({ bottom: 20 })

        // ‰∏ªÊ†áÈ¢ò
        Text(this.detail.title)
          .fontSize(20)
          .fontWeight(FontWeight.Bold)
          .fontColor('#FFFFFF')
          .margin({ bottom: 12 })
          .maxLines(2)
          .textOverflow({ overflow: TextOverflow.Ellipsis })

        // ‰ΩúËÄÖ„ÄÅÊí≠ÊîæÈáè
        Row() {
          Text(this.detail.author)
            .fontSize(15)
            .fontColor('#CCCCCC')
            .margin({ right: 18 })
          Text(this.detail.plays + 'Ê¨°Êí≠Êîæ')
            .fontSize(15)
            .fontColor('#CCCCCC')
        }
        .margin({ bottom: 12 })

        // ÂàÜÁ±ª
        Row() {
          Text('ÂàÜÁ±ªÔºö')
            .fontSize(14)
            .fontColor('#888888')
          Text(this.detail.category)
            .fontSize(14)
            .fontColor('#BBBBBB')
        }
        .margin({ bottom: 8 })

        // Ê†áÁ≠æ
        Row() {
          ForEach(this.getTags(), (tag: string) => {
            Text('#' + tag)
              .fontSize(12)
              .fontColor('#FFCC66')
              .backgroundColor('rgba(255,204,102,0.09)')
              .padding({ left: 10, right: 10, top: 3, bottom: 3 })
              .borderRadius(10)
              .margin({ right: 8 })
          })
        }
        .margin({ bottom: 16 })

        // ÁÆÄ‰ªã
        Column() {
          Text('ÂÜÖÂÆπÁÆÄ‰ªã')
            .fontSize(16)
            .fontWeight(FontWeight.Medium)
            .fontColor('#FFFFFF')
            .margin({ bottom: 6 })
          Text(this.getDescription())
            .fontSize(14)
            .fontColor('#CFCFCF')
            .lineHeight(22)
        }
        .margin({ bottom: 24 })

        // Êìç‰ΩúÊåâÈíÆ
        Row() {
          Button() {
            Text('üëç Ëµû‰∏Ä‰∏ã').fontSize(15).fontColor('#FF5555')
          }
          .backgroundColor('#222')
          .borderRadius(15)
          .padding({ left: 18, right: 18, top: 8, bottom: 8 })
          .margin({ right: 20 })

          Button() {
            Text('ÂàÜ‰∫´').fontSize(15).fontColor('#FFD700')
          }
          .backgroundColor('#222')
          .borderRadius(15)
          .padding({ left: 20, right: 20, top: 8, bottom: 8 })
        }
        .margin({ top: 10, bottom: 10 })
        .justifyContent(FlexAlign.Start)
      }

      Blank()
    }
    .width('100%')
    .height('100%')
    .padding({ left: 18, right: 18, top: 10 })
    .backgroundColor('#111111')
  }
}